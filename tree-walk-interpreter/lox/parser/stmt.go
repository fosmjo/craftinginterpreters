// Code generated by `go run ../tool/genast.go`; DO NOT EDIT.

package parser

import "github.com/fosmjo/lox/scanner"

type Stmt interface {
    Accept(StmtVisitor) interface{}
}

type StmtVisitor interface {
    VisitBlockStmt(BlockStmt) interface{}
    VisitExpressionStmt(ExpressionStmt) interface{}
    VisitIfStmt(IfStmt) interface{}
    VisitPrintStmt(PrintStmt) interface{}
    VisitVarStmt(VarStmt) interface{}
    VisitWhileStmt(WhileStmt) interface{}
}

type BlockStmt struct {
    Statements []Stmt
}

func NewBlockStmt(statements []Stmt) BlockStmt {
    return BlockStmt{
        Statements: statements,
    }
}

func (stmt BlockStmt) Accept(visitor StmtVisitor) interface{} {
    return visitor.VisitBlockStmt(stmt)
}

type ExpressionStmt struct {
    Expression Expr
}

func NewExpressionStmt(expression Expr) ExpressionStmt {
    return ExpressionStmt{
        Expression: expression,
    }
}

func (stmt ExpressionStmt) Accept(visitor StmtVisitor) interface{} {
    return visitor.VisitExpressionStmt(stmt)
}

type IfStmt struct {
    Condition Expr
    ThenBranch Stmt
    ElseBranch Stmt
}

func NewIfStmt(condition Expr, thenBranch Stmt, elseBranch Stmt) IfStmt {
    return IfStmt{
        Condition: condition,
        ThenBranch: thenBranch,
        ElseBranch: elseBranch,
    }
}

func (stmt IfStmt) Accept(visitor StmtVisitor) interface{} {
    return visitor.VisitIfStmt(stmt)
}

type PrintStmt struct {
    Expression Expr
}

func NewPrintStmt(expression Expr) PrintStmt {
    return PrintStmt{
        Expression: expression,
    }
}

func (stmt PrintStmt) Accept(visitor StmtVisitor) interface{} {
    return visitor.VisitPrintStmt(stmt)
}

type VarStmt struct {
    Name scanner.Token
    Initializer Expr
}

func NewVarStmt(name scanner.Token, initializer Expr) VarStmt {
    return VarStmt{
        Name: name,
        Initializer: initializer,
    }
}

func (stmt VarStmt) Accept(visitor StmtVisitor) interface{} {
    return visitor.VisitVarStmt(stmt)
}

type WhileStmt struct {
    Condition Expr
    Body Stmt
}

func NewWhileStmt(condition Expr, body Stmt) WhileStmt {
    return WhileStmt{
        Condition: condition,
        Body: body,
    }
}

func (stmt WhileStmt) Accept(visitor StmtVisitor) interface{} {
    return visitor.VisitWhileStmt(stmt)
}

